//Binary operator//
#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
    void get(int &a, int &b){a=x; b=y;}
   /// void set (int a, int b) {x=a; y=b;}
    ///void print(){cout<<x<<" " <<y<<endl;}

    Number operator + (Number ob);
};

Number Number :: operator + (Number ob)
{
    Number tmp;
    tmp.x = x+ob.x;
    tmp.y = y+ob.y;

    return tmp;
}
 int main()
 {
     Number n1(5,6),n2(7,8),n3;
     int x,y;
     n3 = n1+n2;
     n3.get(x,y);
     {cout<<x<<" " <<y<<endl;}


     return 0;
 }
///Template///
#include<iostream>
using namespace std;

template <class T>
 T swp(T &x ,T &y)
 {
     T temp;
     temp = x;
     x = y;
     y = temp;
 }
int main()
{
    int a=10, b=20;
     cout<<"Before swap "<<a<<" And "<<b<<endl;
    swp(a,b);
    cout<<"After swap 
    "<<a<<" And "<<b<<endl;
}

///Relational operator//

#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
   /// void get(int &a, int &b){a=x; b=y;}
   /// void set (int a, int b) {x=a; y=b;}
    ///void print(){cout<<x<<" " <<y<<endl;}

    ///Number operator + (Number ob);

    bool operator == (Number ob);

};

/*Number Number :: operator + (Number ob)
{
    Number tmp;
    tmp.x = x+ob.x;
    tmp.y = y+ob.y;

    return tmp;
}*/
 bool Number::operator == (Number ob) {
    return (x+y)==(ob.x + ob.y);
    }

 int main()
 {
     Number n1(5,6),n2(5,5),n3;
     ///int x,y;
    // n3 = n1+n2;
    /// n3.get(x,y);
    // {cout<<x<<" " <<y<<endl;}

      if(n1 == n2) cout<<"same"<<endl;
      else cout<<"Differ"<<endl;
     return 0;
 }

///Logical Operator///

#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
   // void get(int &a, int &b){a=x; b=y;}

    bool operator && (Number ob);

};


 bool Number::operator && (Number ob) {
    return (x&&y)&&(ob.x && ob.y);
    }

 int main()
 {
     Number n1(4,6),n2(9,9);
     int x,y;

    /// n3.get(x,y);


      if(n1 && n2) cout<<"OK"<<endl;
      else cout<<"ERROR"<<endl;
     return 0;
 }



///Friend operator ///
#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
    void get(int &a, int &b){a=x; b=y;}
   /// void set (int a, int b) {x=a; y=b;}
    ///void print(){cout<<x<<" " <<y<<endl;}

    friend Number operator + (Number ob1,Number ob2); ///difference
};

Number  operator + (Number ob1, Number ob2)
{
    Number tmp;
    tmp.x = ob1.x+ob2.x;
    tmp.y = ob1.y+ob2.y;

    return tmp;
}
 int main()
 {
     Number n1(5,6),n2(7,8),n3;
     int x,y;
     n3 = n1+n2;
     n3.get(x,y);
     {cout<<x<<" " <<y<<endl;}


     return 0;
 }




 