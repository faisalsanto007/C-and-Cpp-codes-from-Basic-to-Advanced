//Illustrate Inheritance//

	#include <iostream>

	class Base {
    	protected:
        int data;
    	public:
        Base(int val = 0) : data(val) { }
        int getData(void) const { return data; }
	};

	class Derived : public Base {
    	public:
        void changeData(int val)
        {
            std::cout << "Change of Derived::data from "
                      << data << "->" << val << std::endl;
            data = val;
        }
	};


	int main()
	{
    	Base b;
    	Derived d;

	d.changeData(20);
    	std::cout << "Base Class data = " << b.getData() << std::endl;
   	std::cout << "Derived Class data = " << d.getData() << std::endl;
	}








//Illustrate Multilevel Class//

	#include <iostream>
	using namespace std;

	class A
	{
    	public:
      	void display()
      	{
          cout<<"Base class content.";
      	}
	};

	class B : public A
	{

	};

	class C : public B
	{

	};

	int main()
	{
    	C obj;
    	obj.display();
    	return 0;
	}







//Illustarte virtual Base Class//

	#include<iostream>
	using namespace std;
	class student

	{
    	protected:
    	int roll_no;

	public:
    	void get_no(int x)
    	{
        roll_no=x;
    	}
    	void put_no()
    	{
	cout<<“Roll
	Number:”<<roll_no;
    	}
	};
	class test: virtual public
	student
	{
	protected:
    	float sub_marks;
    	public:
    	void get_submarks(float y)
    	{
        sub_marks=y;
    	}
    	void put_submarks()
        {
        cout<<“nSubject
	Marks:”<<sub_marks;

    	}
	};

	class sports: public
	virtual student
	{
        protected:
        float sp_marks;
        public:
        void get_spmarks(float z)
        {
        sp_marks=z;
        }

        void put_spmarks()
        {
        cout<<“nSports
        Marks:”<<sp_marks;
        }
        };

        class result: public test,
        public sports


        {

    float total_marks;
    public:

    void put_result()

    {

        total_marks=sub_marks+sp_marks;

        put_no();

        put_submarks();

        put_spmarks();

        cout<<“nTotal
Marks:”<<total_marks;

    }
};

int main()

{
    result R;

    R.get_no(20);

    R.get_submarks(75.6);

    R.get_spmarks(81.2);

    R.put_result();

    return 0;
}







 //Multiple Inheritance//


	#include <iostream>
	using namespace std;

	class Mammal {
  	public:
    	Mammal()
    	{
      	cout << "Mammals can give direct birth." << endl;
    	}
	};

	class WingedAnimal {
	  public:
    	WingedAnimal()
    	{
      cout << "Winged animal can flap." << endl;
    	}
	};

	class Bat: public Mammal, public WingedAnimal {

	};

	int main()
	{
    	Bat b1;
    	return 0;
	}





// Nested Class(Run kore na eta)//
 

#include <iostream.h>
using namespace std;
class Nest
{
public:
class Display
{
private:
int s;
public:
void sum( int a, int b)
{ s =a+b; }
void show( )
{ cout << "\nSum of a and b is:: " << s;}
};
};
void main()
{
Nest::Display x;
x.sum(12, 10);
x.show();
}





//Overload Binary Operator//

#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
    void get(int &a, int &b){a=x; b=y;}
   /// void set (int a, int b) {x=a; y=b;}
    ///void print(){cout<<x<<" " <<y<<endl;}

    Number operator + (Number ob);
};

Number Number :: operator + (Number ob)
{
    Number tmp;
    tmp.x = x+ob.x;
    tmp.y = y+ob.y;

    return tmp;
}
 int main()
 {
     Number n1(5,6),n2(7,8),n3;
     int x,y;
     n3 = n1+n2;
     n3.get(x,y);
     {cout<<x<<" " <<y<<endl;}


     return 0;
 }






//Overload unary Operator//

#include <iostream>
using namespace std;

class Test
{
   private:
      int count;

   public:
       Test(): count(5){}

       void operator ++()
       {
          count = count+1;
       }
       void Display() { cout<<"Count: "<<count; }
};

int main()
{
    Test t;
    // this calls "function void operator ++()" function
    ++t;
    t.Display();
    return 0;
}


//Relational operator//

#include<iostream>
using namespace std;
class Number{
   int x,y;
public:
    Number(){x=0; y=0;}
    Number(int a, int b){x=a; y=b;}
   /// void get(int &a, int &b){a=x; b=y;}
   /// void set (int a, int b) {x=a; y=b;}
    ///void print(){cout<<x<<" " <<y<<endl;}

    ///Number operator + (Number ob);

    bool operator == (Number ob);

};

/*Number Number :: operator + (Number ob)
{
    Number tmp;
    tmp.x = x+ob.x;
    tmp.y = y+ob.y;

    return tmp;
}*/
 bool Number::operator == (Number ob) {
    return (x+y)==(ob.x + ob.y);
    }

 int main()
 {
     Number n1(5,6),n2(5,5),n3;
     ///int x,y;
    // n3 = n1+n2;
    /// n3.get(x,y);
    // {cout<<x<<" " <<y<<endl;}

      if(n1 == n2) cout<<"same"<<endl;
      else cout<<"Differ"<<endl;
     return 0;
 }






//Subcsript Operator//

#include <iostream>
using namespace std;
const int SIZE = 10;

class safearay {
   private:
      int arr[SIZE];
   public:
      safearay()  {
         register int i;
         for(i = 0; i < SIZE; i++){
            arr[i] = i;
         }
      }

      int &operator[](int i) {
         if( i > SIZE ) {
               cout << "Index out of bounds" <<endl;
               // return first element.
               return arr[0];
         }
         return arr[i];
      }
};

int main() {
   safearay A;

   cout << "Value of A[2] : " << A[2] <<endl;
   cout << "Value of A[5] : " << A[5]<<endl;
   cout << "Value of A[12] : " << A[12]<<endl;

   return 0;
}






//Swaping by Generic Fuction//

#include<iostream>

using namespace std;

template <class T>
void swap(T&a,T&b)      //Function Template
{
    T temp=a;
    a=b;
    b=temp;
}

int main()
{
    int x1=4,y1=7;
    float x2=4.5,y2=7.5;

    cout<<“Before Swap:”;
    cout<<“nx1=”<<x1<<“ty1=”<<y1;
    cout<<“nx2=”<<x2<<“ty2=”<<y2;

    swap(x1,y1);
    swap(x2,y2);

    cout<<“nnAfter Swap:”;
    cout<<“nx1=”<<x1<<“ty1=”<<y1;
    cout<<“nx2=”<<x2<<“ty2=”<<y2;

    return 0;
}
