Generic function or template

#include<iostream>

using namespace std;

template <class T> T swp(T &x,T &y)
{
    T temp;

    temp=x;
    x=y;
    y=temp;
}

int main()
{
    int a=10,b=20;

    cout<<"Before swap "<<a<<" and "<<b<<endl;

    swp(a,b);

    cout<<"After swap "<<a<<" and "<<b<<endl;

    swp(a,b);
}


-----------------------------------------------------------
Pure virtual function

#include<iostream>

using namespace std;

class base
{
private:
    int a;
public:
    int show(){cout<<" This is from the base class. "<<endl;}
    virtual stop()=0;
};

class derived:public base
{
private:
    int a;
public:
    int display(){cout<<" This is from the derived class. "<<endl;}
    stop(){}
};

int main()
{
    derived one;
    one.display();
    one.show();
}


---------------------------------------------------
Exception handaling

#include<iostream>

using namespace std;

int main()
{
    int a,b;
    cout<<"Enter the value of a and b : ";
    cin>>a>>b;

    try
    {
        if(b==0)
            throw(b);
        else
            cout<<"Result is : "<<a/b<<endl;
    }
    catch (int i)
    {
        cout<<"Exception caught. "<<endl;
    }

}

---------------------------------------

Overload using friend function

#include <iostream>
using namespace std;

class one
{
public:
    int a;
public:
    one(){}
    one(int x){a=x;}
    display(){cout<<a<<endl;}
    friend one operator+(int a,one b);
};

one operator+(int a,one b)
{
    one temp;

    temp.a=a+b.a;

    return temp;
}


int main()
{
    one b=20,c=0;
    cout<<"Before addition c = ";
    c.display();
    c=6+b;

    cout<<"After addition c = ";
    c.display();
}

-------------------------------------------------

Normal overload or add two object

#include <iostream>
using namespace std;

class one
{
public:
    int a;
public:
    one(){}
    one(int x){a=x;}
    display(){cout<<a<<endl;}
    one operator+(one b);
};

one one::operator+(one b)
{
    one temp;

    temp=a+b.a;
    return temp;
}


int main()
{
    one a=10,b=20,c=0;
    cout<<"Before addition c = ";
    c.display();
    c=a+b;

    cout<<"After addition c = ";
    c.display();
}


----------------------------------------
overload ++ operator

#include <iostream>
using namespace std;

class one
{
public:
    int a;
public:
    one(){}
    one(int x){a=x;}
    display(){cout<<a<<endl;}
    one operator++();
};

one one::operator++()
{
    a=a+1;
}


int main()
{
    one c=1;
    cout<<"Before addition c = ";
    c.display();
    ++c;

    cout<<"After addition c = ";
    c.display();
}


----------------------------------


